// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package resource_organization_contact

import (
	"context"
	"regexp"

	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func OrganizationContactResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"id": schema.StringAttribute{
				Computed:            true,
				Description:         "The UUID of the contact",
				MarkdownDescription: "The UUID of the contact",
				PlanModifiers:       []planmodifier.String{stringplanmodifier.UseStateForUnknown()},
			},
			"first_name": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "A first name for the contact.",
				MarkdownDescription: "A first name for the contact.",
				Validators: []validator.String{
					stringvalidator.RegexMatches(regexp.MustCompile("^[ -~]*$"), ""),
				},
				Default: stringdefault.StaticString(""),
			},
			"last_name": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "A last name for the contact.",
				MarkdownDescription: "A last name for the contact.",
				Validators: []validator.String{
					stringvalidator.RegexMatches(regexp.MustCompile("^[ -~]*$"), ""),
				},
				Default: stringdefault.StaticString(""),
			},
			"notes": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Notes about the contact.",
				MarkdownDescription: "Notes about the contact.",
				Validators: []validator.String{
					stringvalidator.RegexMatches(regexp.MustCompile("^[ -~]*$"), ""),
				},
				Default: stringdefault.StaticString(""),
			},
			"email": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "An e-mail for the contact.",
				MarkdownDescription: "An e-mail for the contact.",
				Validators: []validator.String{
					stringvalidator.RegexMatches(regexp.MustCompile("^[ -~]*$"), ""),
				},
				Default: stringdefault.StaticString(""),
			},
			"phone": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "A phone number for the contact.",
				MarkdownDescription: "A phone number for the contact.",
				Validators: []validator.String{
					stringvalidator.RegexMatches(regexp.MustCompile("^[ -~]*$"), ""),
				},
				Default: stringdefault.StaticString(""),
			},
			"roles": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The roles of the contact.",
				MarkdownDescription: "The roles of the contact.",
			},
			"organization_id": schema.StringAttribute{
				Required: true,
			},
		},
	}
}

type OrganizationContactModel struct {
	Id             types.String `tfsdk:"id"`
	FirstName      types.String `tfsdk:"first_name"`
	LastName       types.String `tfsdk:"last_name"`
	Phone          types.String `tfsdk:"phone"`
	Email          types.String `tfsdk:"email"`
	Notes          types.String `tfsdk:"notes"`
	Roles          types.List   `tfsdk:"roles"`
	OrganizationId types.String `tfsdk:"organization_id"`
}
