// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package resource_organization_project

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"regexp"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func OrganizationProjectResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"created_at": schema.StringAttribute{
				Computed:            true,
				Description:         "The time the resource was created.",
				MarkdownDescription: "The time the resource was created.",
			},
			"description": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "The description of the project.",
				MarkdownDescription: "The description of the project.",
				Validators: []validator.String{
					stringvalidator.LengthAtMost(1000),
					stringvalidator.RegexMatches(regexp.MustCompile("^[^\\u0000]*$"), ""),
				},
				Default: stringdefault.StaticString(""),
			},
			"id": schema.StringAttribute{
				Computed:            true,
				Description:         "The unique identifier of the project, as inherited from OpenStack",
				MarkdownDescription: "The unique identifier of the project, as inherited from OpenStack",
			},
			"name": schema.StringAttribute{
				Required:            true,
				Description:         "The name of the project.",
				MarkdownDescription: "The name of the project.",
				Validators: []validator.String{
					stringvalidator.LengthBetween(3, 62),
					stringvalidator.RegexMatches(regexp.MustCompile("^[a-z0-9]+(?:-[a-z0-9]+)*$"), ""),
				},
			},
			"organization_id": schema.StringAttribute{
				Optional: true,
				Computed: true,
			},
			"project_id": schema.StringAttribute{
				Optional: true,
				Computed: true,
				Validators: []validator.String{
					stringvalidator.RegexMatches(regexp.MustCompile("^[a-f0-9]{8}[a-f0-9]{4}4[a-f0-9]{3}[89ab][a-f0-9]{3}[a-f0-9]{12}$"), ""),
				},
			},
			"status": schema.StringAttribute{
				Computed:            true,
				Description:         "The status of the project in OpenStack.",
				MarkdownDescription: "The status of the project in OpenStack.",
				Default:             stringdefault.StaticString("active"),
			},
			"tags": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The tags of the project.",
				MarkdownDescription: "The tags of the project.",
			},
			"updated_at": schema.StringAttribute{
				Computed:            true,
				Description:         "The time the resource was last updated.",
				MarkdownDescription: "The time the resource was last updated.",
			},
		},
	}
}

type OrganizationProjectModel struct {
	CreatedAt      types.String `tfsdk:"created_at"`
	Description    types.String `tfsdk:"description"`
	Id             types.String `tfsdk:"id"`
	Name           types.String `tfsdk:"name"`
	OrganizationId types.String `tfsdk:"organization_id"`
	ProjectId      types.String `tfsdk:"project_id"`
	Status         types.String `tfsdk:"status"`
	Tags           types.List   `tfsdk:"tags"`
	UpdatedAt      types.String `tfsdk:"updated_at"`
}
