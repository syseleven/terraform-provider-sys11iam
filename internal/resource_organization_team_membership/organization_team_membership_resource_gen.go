// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package resource_organization_team_membership

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func OrganizationTeamMembershipResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"member_id": schema.StringAttribute{
				Optional: true,
				Computed: true,
			},
			"organization_id": schema.StringAttribute{
				Optional: true,
				Computed: true,
			},
			"service_account_membership": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"membership_type": schema.StringAttribute{
						Computed:            true,
						Description:         "The type of the membership.",
						MarkdownDescription: "The type of the membership.",
						Default:             stringdefault.StaticString("service_account"),
					},
					"org_permissions": schema.ListAttribute{
						ElementType:         types.StringType,
						Computed:            true,
						Description:         "The organization permissions of the team",
						MarkdownDescription: "The organization permissions of the team",
					},
					"organization": schema.SingleNestedAttribute{
						Attributes: map[string]schema.Attribute{
							"created_at": schema.StringAttribute{
								Computed:            true,
								Description:         "The time the customer entered a contract with SysEleven.",
								MarkdownDescription: "The time the customer entered a contract with SysEleven.",
							},
							"description": schema.StringAttribute{
								Computed:            true,
								Description:         "A description for the organization.",
								MarkdownDescription: "A description for the organization.",
								Default:             stringdefault.StaticString(""),
							},
							"id": schema.StringAttribute{
								Computed:            true,
								Description:         "The UUID of the organization",
								MarkdownDescription: "The UUID of the organization",
							},
							"is_active": schema.BoolAttribute{
								Computed:            true,
								Description:         "Whether the organization is active or not.",
								MarkdownDescription: "Whether the organization is active or not.",
							},
							"name": schema.StringAttribute{
								Computed:            true,
								Description:         "A unique name for the organization.",
								MarkdownDescription: "A unique name for the organization.",
							},
							"tags": schema.ListAttribute{
								ElementType:         types.StringType,
								Computed:            true,
								Description:         "The tags of the organization.",
								MarkdownDescription: "The tags of the organization.",
							},
							"updated_at": schema.StringAttribute{
								Computed:            true,
								Description:         "The time the resource was last updated.",
								MarkdownDescription: "The time the resource was last updated.",
							},
						},
						CustomType: OrganizationType{
							ObjectType: types.ObjectType{
								AttrTypes: OrganizationValue{}.AttributeTypes(ctx),
							},
						},
						Computed: true,
					},
					"projects": schema.MapAttribute{
						ElementType: types.ListType{
							ElemType: types.StringType,
						},
						Computed:            true,
						Description:         "The permissions of the team within each project the team is assinged to",
						MarkdownDescription: "The permissions of the team within each project the team is assinged to",
					},
					"service_account": schema.SingleNestedAttribute{
						Attributes: map[string]schema.Attribute{
							"created_at": schema.StringAttribute{
								Computed:            true,
								Description:         "The time the resource was created.",
								MarkdownDescription: "The time the resource was created.",
							},
							"description": schema.StringAttribute{
								Computed:            true,
								Description:         "The description of the service account.",
								MarkdownDescription: "The description of the service account.",
								Default:             stringdefault.StaticString(""),
							},
							"id": schema.StringAttribute{
								Computed:            true,
								Description:         "The UUID of the service account.",
								MarkdownDescription: "The UUID of the service account.",
							},
							"name": schema.StringAttribute{
								Computed:            true,
								Description:         "The unique name of the service account.",
								MarkdownDescription: "The unique name of the service account.",
							},
							"updated_at": schema.StringAttribute{
								Computed:            true,
								Description:         "The time the resource was last updated.",
								MarkdownDescription: "The time the resource was last updated.",
							},
						},
						CustomType: ServiceAccountType{
							ObjectType: types.ObjectType{
								AttrTypes: ServiceAccountValue{}.AttributeTypes(ctx),
							},
						},
						Computed: true,
					},
					"team": schema.SingleNestedAttribute{
						Attributes: map[string]schema.Attribute{
							"description": schema.StringAttribute{
								Computed:            true,
								Description:         "A description for the organization team.",
								MarkdownDescription: "A description for the organization team.",
								Default:             stringdefault.StaticString(""),
							},
							"id": schema.StringAttribute{
								Computed:            true,
								Description:         "The UUID of the organization team",
								MarkdownDescription: "The UUID of the organization team",
							},
							"name": schema.StringAttribute{
								Computed:            true,
								Description:         "A unique name for the organization team.",
								MarkdownDescription: "A unique name for the organization team.",
							},
							"tags": schema.ListAttribute{
								ElementType:         types.StringType,
								Computed:            true,
								Description:         "The tags of the organization team.",
								MarkdownDescription: "The tags of the organization team.",
							},
						},
						CustomType: TeamType{
							ObjectType: types.ObjectType{
								AttrTypes: TeamValue{}.AttributeTypes(ctx),
							},
						},
						Computed: true,
					},
					"team_permissions": schema.ListAttribute{
						ElementType:         types.StringType,
						Computed:            true,
						Description:         "The team permissions the user has in the team",
						MarkdownDescription: "The team permissions the user has in the team",
					},
				},
				CustomType: ServiceAccountMembershipType{
					ObjectType: types.ObjectType{
						AttrTypes: ServiceAccountMembershipValue{}.AttributeTypes(ctx),
					},
				},
				Computed: true,
			},
			"team_id": schema.StringAttribute{
				Optional: true,
				Computed: true,
			},
			"user_team_membership": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"membership_type": schema.StringAttribute{
						Computed:            true,
						Description:         "The type of the membership.",
						MarkdownDescription: "The type of the membership.",
						Default:             stringdefault.StaticString("user"),
					},
					"org_permissions": schema.ListAttribute{
						ElementType:         types.StringType,
						Computed:            true,
						Description:         "The organization permissions of the team",
						MarkdownDescription: "The organization permissions of the team",
					},
					"organization": schema.SingleNestedAttribute{
						Attributes: map[string]schema.Attribute{
							"created_at": schema.StringAttribute{
								Computed:            true,
								Description:         "The time the customer entered a contract with SysEleven.",
								MarkdownDescription: "The time the customer entered a contract with SysEleven.",
							},
							"description": schema.StringAttribute{
								Computed:            true,
								Description:         "A description for the organization.",
								MarkdownDescription: "A description for the organization.",
								Default:             stringdefault.StaticString(""),
							},
							"id": schema.StringAttribute{
								Computed:            true,
								Description:         "The UUID of the organization",
								MarkdownDescription: "The UUID of the organization",
							},
							"is_active": schema.BoolAttribute{
								Computed:            true,
								Description:         "Whether the organization is active or not.",
								MarkdownDescription: "Whether the organization is active or not.",
							},
							"name": schema.StringAttribute{
								Computed:            true,
								Description:         "A unique name for the organization.",
								MarkdownDescription: "A unique name for the organization.",
							},
							"tags": schema.ListAttribute{
								ElementType:         types.StringType,
								Computed:            true,
								Description:         "The tags of the organization.",
								MarkdownDescription: "The tags of the organization.",
							},
							"updated_at": schema.StringAttribute{
								Computed:            true,
								Description:         "The time the resource was last updated.",
								MarkdownDescription: "The time the resource was last updated.",
							},
						},
						CustomType: OrganizationType{
							ObjectType: types.ObjectType{
								AttrTypes: OrganizationValue{}.AttributeTypes(ctx),
							},
						},
						Computed: true,
					},
					"projects": schema.MapAttribute{
						ElementType: types.ListType{
							ElemType: types.StringType,
						},
						Computed:            true,
						Description:         "The permissions of the team within each project the team is assigned to",
						MarkdownDescription: "The permissions of the team within each project the team is assigned to",
					},
					"team": schema.SingleNestedAttribute{
						Attributes: map[string]schema.Attribute{
							"description": schema.StringAttribute{
								Computed:            true,
								Description:         "A description for the organization team.",
								MarkdownDescription: "A description for the organization team.",
								Default:             stringdefault.StaticString(""),
							},
							"id": schema.StringAttribute{
								Computed:            true,
								Description:         "The UUID of the organization team",
								MarkdownDescription: "The UUID of the organization team",
							},
							"name": schema.StringAttribute{
								Computed:            true,
								Description:         "A unique name for the organization team.",
								MarkdownDescription: "A unique name for the organization team.",
							},
							"tags": schema.ListAttribute{
								ElementType:         types.StringType,
								Computed:            true,
								Description:         "The tags of the organization team.",
								MarkdownDescription: "The tags of the organization team.",
							},
						},
						CustomType: TeamType{
							ObjectType: types.ObjectType{
								AttrTypes: TeamValue{}.AttributeTypes(ctx),
							},
						},
						Computed: true,
					},
					"team_permissions": schema.ListAttribute{
						ElementType:         types.StringType,
						Computed:            true,
						Description:         "The team permissions the user has in the team",
						MarkdownDescription: "The team permissions the user has in the team",
					},
					"user": schema.SingleNestedAttribute{
						Attributes: map[string]schema.Attribute{
							"email": schema.StringAttribute{
								Computed:            true,
								Description:         "The email address of the user.",
								MarkdownDescription: "The email address of the user.",
							},
							"id": schema.StringAttribute{
								Computed:            true,
								Description:         "The UUID of the user.",
								MarkdownDescription: "The UUID of the user.",
							},
						},
						CustomType: UserType{
							ObjectType: types.ObjectType{
								AttrTypes: UserValue{}.AttributeTypes(ctx),
							},
						},
						Computed: true,
					},
				},
				CustomType: UserTeamMembershipType{
					ObjectType: types.ObjectType{
						AttrTypes: UserTeamMembershipValue{}.AttributeTypes(ctx),
					},
				},
				Computed: true,
			},
		},
	}
}

type OrganizationTeamMembershipModel struct {
	MemberId                 types.String                  `tfsdk:"member_id"`
	OrganizationId           types.String                  `tfsdk:"organization_id"`
	ServiceAccountMembership ServiceAccountMembershipValue `tfsdk:"service_account_membership"`
	TeamId                   types.String                  `tfsdk:"team_id"`
	UserTeamMembership       UserTeamMembershipValue       `tfsdk:"user_team_membership"`
}

var _ basetypes.ObjectTypable = ServiceAccountMembershipType{}

type ServiceAccountMembershipType struct {
	basetypes.ObjectType
}

func (t ServiceAccountMembershipType) Equal(o attr.Type) bool {
	other, ok := o.(ServiceAccountMembershipType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t ServiceAccountMembershipType) String() string {
	return "ServiceAccountMembershipType"
}

func (t ServiceAccountMembershipType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	membershipTypeAttribute, ok := attributes["membership_type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`membership_type is missing from object`)

		return nil, diags
	}

	membershipTypeVal, ok := membershipTypeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`membership_type expected to be basetypes.StringValue, was: %T`, membershipTypeAttribute))
	}

	orgPermissionsAttribute, ok := attributes["org_permissions"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`org_permissions is missing from object`)

		return nil, diags
	}

	orgPermissionsVal, ok := orgPermissionsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`org_permissions expected to be basetypes.ListValue, was: %T`, orgPermissionsAttribute))
	}

	organizationAttribute, ok := attributes["organization"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`organization is missing from object`)

		return nil, diags
	}

	organizationVal, ok := organizationAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`organization expected to be basetypes.ObjectValue, was: %T`, organizationAttribute))
	}

	projectsAttribute, ok := attributes["projects"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`projects is missing from object`)

		return nil, diags
	}

	projectsVal, ok := projectsAttribute.(basetypes.MapValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`projects expected to be basetypes.MapValue, was: %T`, projectsAttribute))
	}

	serviceAccountAttribute, ok := attributes["service_account"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`service_account is missing from object`)

		return nil, diags
	}

	serviceAccountVal, ok := serviceAccountAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`service_account expected to be basetypes.ObjectValue, was: %T`, serviceAccountAttribute))
	}

	teamAttribute, ok := attributes["team"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`team is missing from object`)

		return nil, diags
	}

	teamVal, ok := teamAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`team expected to be basetypes.ObjectValue, was: %T`, teamAttribute))
	}

	teamPermissionsAttribute, ok := attributes["team_permissions"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`team_permissions is missing from object`)

		return nil, diags
	}

	teamPermissionsVal, ok := teamPermissionsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`team_permissions expected to be basetypes.ListValue, was: %T`, teamPermissionsAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return ServiceAccountMembershipValue{
		MembershipType:  membershipTypeVal,
		OrgPermissions:  orgPermissionsVal,
		Organization:    organizationVal,
		Projects:        projectsVal,
		ServiceAccount:  serviceAccountVal,
		Team:            teamVal,
		TeamPermissions: teamPermissionsVal,
		state:           attr.ValueStateKnown,
	}, diags
}

func NewServiceAccountMembershipValueNull() ServiceAccountMembershipValue {
	return ServiceAccountMembershipValue{
		state: attr.ValueStateNull,
	}
}

func NewServiceAccountMembershipValueUnknown() ServiceAccountMembershipValue {
	return ServiceAccountMembershipValue{
		state: attr.ValueStateUnknown,
	}
}

func NewServiceAccountMembershipValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (ServiceAccountMembershipValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing ServiceAccountMembershipValue Attribute Value",
				"While creating a ServiceAccountMembershipValue value, a missing attribute value was detected. "+
					"A ServiceAccountMembershipValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ServiceAccountMembershipValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid ServiceAccountMembershipValue Attribute Type",
				"While creating a ServiceAccountMembershipValue value, an invalid attribute value was detected. "+
					"A ServiceAccountMembershipValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ServiceAccountMembershipValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("ServiceAccountMembershipValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra ServiceAccountMembershipValue Attribute Value",
				"While creating a ServiceAccountMembershipValue value, an extra attribute value was detected. "+
					"A ServiceAccountMembershipValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra ServiceAccountMembershipValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewServiceAccountMembershipValueUnknown(), diags
	}

	membershipTypeAttribute, ok := attributes["membership_type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`membership_type is missing from object`)

		return NewServiceAccountMembershipValueUnknown(), diags
	}

	membershipTypeVal, ok := membershipTypeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`membership_type expected to be basetypes.StringValue, was: %T`, membershipTypeAttribute))
	}

	orgPermissionsAttribute, ok := attributes["org_permissions"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`org_permissions is missing from object`)

		return NewServiceAccountMembershipValueUnknown(), diags
	}

	orgPermissionsVal, ok := orgPermissionsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`org_permissions expected to be basetypes.ListValue, was: %T`, orgPermissionsAttribute))
	}

	organizationAttribute, ok := attributes["organization"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`organization is missing from object`)

		return NewServiceAccountMembershipValueUnknown(), diags
	}

	organizationVal, ok := organizationAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`organization expected to be basetypes.ObjectValue, was: %T`, organizationAttribute))
	}

	projectsAttribute, ok := attributes["projects"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`projects is missing from object`)

		return NewServiceAccountMembershipValueUnknown(), diags
	}

	projectsVal, ok := projectsAttribute.(basetypes.MapValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`projects expected to be basetypes.MapValue, was: %T`, projectsAttribute))
	}

	serviceAccountAttribute, ok := attributes["service_account"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`service_account is missing from object`)

		return NewServiceAccountMembershipValueUnknown(), diags
	}

	serviceAccountVal, ok := serviceAccountAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`service_account expected to be basetypes.ObjectValue, was: %T`, serviceAccountAttribute))
	}

	teamAttribute, ok := attributes["team"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`team is missing from object`)

		return NewServiceAccountMembershipValueUnknown(), diags
	}

	teamVal, ok := teamAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`team expected to be basetypes.ObjectValue, was: %T`, teamAttribute))
	}

	teamPermissionsAttribute, ok := attributes["team_permissions"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`team_permissions is missing from object`)

		return NewServiceAccountMembershipValueUnknown(), diags
	}

	teamPermissionsVal, ok := teamPermissionsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`team_permissions expected to be basetypes.ListValue, was: %T`, teamPermissionsAttribute))
	}

	if diags.HasError() {
		return NewServiceAccountMembershipValueUnknown(), diags
	}

	return ServiceAccountMembershipValue{
		MembershipType:  membershipTypeVal,
		OrgPermissions:  orgPermissionsVal,
		Organization:    organizationVal,
		Projects:        projectsVal,
		ServiceAccount:  serviceAccountVal,
		Team:            teamVal,
		TeamPermissions: teamPermissionsVal,
		state:           attr.ValueStateKnown,
	}, diags
}

func NewServiceAccountMembershipValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) ServiceAccountMembershipValue {
	object, diags := NewServiceAccountMembershipValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewServiceAccountMembershipValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t ServiceAccountMembershipType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewServiceAccountMembershipValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewServiceAccountMembershipValueUnknown(), nil
	}

	if in.IsNull() {
		return NewServiceAccountMembershipValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewServiceAccountMembershipValueMust(ServiceAccountMembershipValue{}.AttributeTypes(ctx), attributes), nil
}

func (t ServiceAccountMembershipType) ValueType(ctx context.Context) attr.Value {
	return ServiceAccountMembershipValue{}
}

var _ basetypes.ObjectValuable = ServiceAccountMembershipValue{}

type ServiceAccountMembershipValue struct {
	MembershipType  basetypes.StringValue `tfsdk:"membership_type"`
	OrgPermissions  basetypes.ListValue   `tfsdk:"org_permissions"`
	Organization    basetypes.ObjectValue `tfsdk:"organization"`
	Projects        basetypes.MapValue    `tfsdk:"projects"`
	ServiceAccount  basetypes.ObjectValue `tfsdk:"service_account"`
	Team            basetypes.ObjectValue `tfsdk:"team"`
	TeamPermissions basetypes.ListValue   `tfsdk:"team_permissions"`
	state           attr.ValueState
}

func (v ServiceAccountMembershipValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 7)

	var val tftypes.Value
	var err error

	attrTypes["membership_type"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["org_permissions"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["organization"] = basetypes.ObjectType{
		AttrTypes: OrganizationValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)
	attrTypes["projects"] = basetypes.MapType{
		ElemType: types.ListType{
			ElemType: types.StringType,
		},
	}.TerraformType(ctx)
	attrTypes["service_account"] = basetypes.ObjectType{
		AttrTypes: ServiceAccountValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)
	attrTypes["team"] = basetypes.ObjectType{
		AttrTypes: TeamValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)
	attrTypes["team_permissions"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 7)

		val, err = v.MembershipType.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["membership_type"] = val

		val, err = v.OrgPermissions.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["org_permissions"] = val

		val, err = v.Organization.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["organization"] = val

		val, err = v.Projects.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["projects"] = val

		val, err = v.ServiceAccount.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["service_account"] = val

		val, err = v.Team.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["team"] = val

		val, err = v.TeamPermissions.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["team_permissions"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v ServiceAccountMembershipValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v ServiceAccountMembershipValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v ServiceAccountMembershipValue) String() string {
	return "ServiceAccountMembershipValue"
}

func (v ServiceAccountMembershipValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var organization basetypes.ObjectValue

	if v.Organization.IsNull() {
		organization = types.ObjectNull(
			OrganizationValue{}.AttributeTypes(ctx),
		)
	}

	if v.Organization.IsUnknown() {
		organization = types.ObjectUnknown(
			OrganizationValue{}.AttributeTypes(ctx),
		)
	}

	if !v.Organization.IsNull() && !v.Organization.IsUnknown() {
		organization = types.ObjectValueMust(
			OrganizationValue{}.AttributeTypes(ctx),
			v.Organization.Attributes(),
		)
	}

	var serviceAccount basetypes.ObjectValue

	if v.ServiceAccount.IsNull() {
		serviceAccount = types.ObjectNull(
			ServiceAccountValue{}.AttributeTypes(ctx),
		)
	}

	if v.ServiceAccount.IsUnknown() {
		serviceAccount = types.ObjectUnknown(
			ServiceAccountValue{}.AttributeTypes(ctx),
		)
	}

	if !v.ServiceAccount.IsNull() && !v.ServiceAccount.IsUnknown() {
		serviceAccount = types.ObjectValueMust(
			ServiceAccountValue{}.AttributeTypes(ctx),
			v.ServiceAccount.Attributes(),
		)
	}

	var team basetypes.ObjectValue

	if v.Team.IsNull() {
		team = types.ObjectNull(
			TeamValue{}.AttributeTypes(ctx),
		)
	}

	if v.Team.IsUnknown() {
		team = types.ObjectUnknown(
			TeamValue{}.AttributeTypes(ctx),
		)
	}

	if !v.Team.IsNull() && !v.Team.IsUnknown() {
		team = types.ObjectValueMust(
			TeamValue{}.AttributeTypes(ctx),
			v.Team.Attributes(),
		)
	}

	var orgPermissionsVal basetypes.ListValue
	switch {
	case v.OrgPermissions.IsUnknown():
		orgPermissionsVal = types.ListUnknown(types.StringType)
	case v.OrgPermissions.IsNull():
		orgPermissionsVal = types.ListNull(types.StringType)
	default:
		var d diag.Diagnostics
		orgPermissionsVal, d = types.ListValue(types.StringType, v.OrgPermissions.Elements())
		diags.Append(d...)
	}

	if diags.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"membership_type": basetypes.StringType{},
			"org_permissions": basetypes.ListType{
				ElemType: types.StringType,
			},
			"organization": basetypes.ObjectType{
				AttrTypes: OrganizationValue{}.AttributeTypes(ctx),
			},
			"projects": basetypes.MapType{
				ElemType: types.ListType{
					ElemType: types.StringType,
				},
			},
			"service_account": basetypes.ObjectType{
				AttrTypes: ServiceAccountValue{}.AttributeTypes(ctx),
			},
			"team": basetypes.ObjectType{
				AttrTypes: TeamValue{}.AttributeTypes(ctx),
			},
			"team_permissions": basetypes.ListType{
				ElemType: types.StringType,
			},
		}), diags
	}

	var projectsVal basetypes.MapValue
	switch {
	case v.Projects.IsUnknown():
		projectsVal = types.MapUnknown(types.ListType{
			ElemType: types.StringType,
		})
	case v.Projects.IsNull():
		projectsVal = types.MapNull(types.ListType{
			ElemType: types.StringType,
		})
	default:
		var d diag.Diagnostics
		projectsVal, d = types.MapValue(types.ListType{
			ElemType: types.StringType,
		}, v.Projects.Elements())
		diags.Append(d...)
	}

	if diags.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"membership_type": basetypes.StringType{},
			"org_permissions": basetypes.ListType{
				ElemType: types.StringType,
			},
			"organization": basetypes.ObjectType{
				AttrTypes: OrganizationValue{}.AttributeTypes(ctx),
			},
			"projects": basetypes.MapType{
				ElemType: types.ListType{
					ElemType: types.StringType,
				},
			},
			"service_account": basetypes.ObjectType{
				AttrTypes: ServiceAccountValue{}.AttributeTypes(ctx),
			},
			"team": basetypes.ObjectType{
				AttrTypes: TeamValue{}.AttributeTypes(ctx),
			},
			"team_permissions": basetypes.ListType{
				ElemType: types.StringType,
			},
		}), diags
	}

	var teamPermissionsVal basetypes.ListValue
	switch {
	case v.TeamPermissions.IsUnknown():
		teamPermissionsVal = types.ListUnknown(types.StringType)
	case v.TeamPermissions.IsNull():
		teamPermissionsVal = types.ListNull(types.StringType)
	default:
		var d diag.Diagnostics
		teamPermissionsVal, d = types.ListValue(types.StringType, v.TeamPermissions.Elements())
		diags.Append(d...)
	}

	if diags.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"membership_type": basetypes.StringType{},
			"org_permissions": basetypes.ListType{
				ElemType: types.StringType,
			},
			"organization": basetypes.ObjectType{
				AttrTypes: OrganizationValue{}.AttributeTypes(ctx),
			},
			"projects": basetypes.MapType{
				ElemType: types.ListType{
					ElemType: types.StringType,
				},
			},
			"service_account": basetypes.ObjectType{
				AttrTypes: ServiceAccountValue{}.AttributeTypes(ctx),
			},
			"team": basetypes.ObjectType{
				AttrTypes: TeamValue{}.AttributeTypes(ctx),
			},
			"team_permissions": basetypes.ListType{
				ElemType: types.StringType,
			},
		}), diags
	}

	attributeTypes := map[string]attr.Type{
		"membership_type": basetypes.StringType{},
		"org_permissions": basetypes.ListType{
			ElemType: types.StringType,
		},
		"organization": basetypes.ObjectType{
			AttrTypes: OrganizationValue{}.AttributeTypes(ctx),
		},
		"projects": basetypes.MapType{
			ElemType: types.ListType{
				ElemType: types.StringType,
			},
		},
		"service_account": basetypes.ObjectType{
			AttrTypes: ServiceAccountValue{}.AttributeTypes(ctx),
		},
		"team": basetypes.ObjectType{
			AttrTypes: TeamValue{}.AttributeTypes(ctx),
		},
		"team_permissions": basetypes.ListType{
			ElemType: types.StringType,
		},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"membership_type":  v.MembershipType,
			"org_permissions":  orgPermissionsVal,
			"organization":     organization,
			"projects":         projectsVal,
			"service_account":  serviceAccount,
			"team":             team,
			"team_permissions": teamPermissionsVal,
		})

	return objVal, diags
}

func (v ServiceAccountMembershipValue) Equal(o attr.Value) bool {
	other, ok := o.(ServiceAccountMembershipValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.MembershipType.Equal(other.MembershipType) {
		return false
	}

	if !v.OrgPermissions.Equal(other.OrgPermissions) {
		return false
	}

	if !v.Organization.Equal(other.Organization) {
		return false
	}

	if !v.Projects.Equal(other.Projects) {
		return false
	}

	if !v.ServiceAccount.Equal(other.ServiceAccount) {
		return false
	}

	if !v.Team.Equal(other.Team) {
		return false
	}

	if !v.TeamPermissions.Equal(other.TeamPermissions) {
		return false
	}

	return true
}

func (v ServiceAccountMembershipValue) Type(ctx context.Context) attr.Type {
	return ServiceAccountMembershipType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v ServiceAccountMembershipValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"membership_type": basetypes.StringType{},
		"org_permissions": basetypes.ListType{
			ElemType: types.StringType,
		},
		"organization": basetypes.ObjectType{
			AttrTypes: OrganizationValue{}.AttributeTypes(ctx),
		},
		"projects": basetypes.MapType{
			ElemType: types.ListType{
				ElemType: types.StringType,
			},
		},
		"service_account": basetypes.ObjectType{
			AttrTypes: ServiceAccountValue{}.AttributeTypes(ctx),
		},
		"team": basetypes.ObjectType{
			AttrTypes: TeamValue{}.AttributeTypes(ctx),
		},
		"team_permissions": basetypes.ListType{
			ElemType: types.StringType,
		},
	}
}

var _ basetypes.ObjectTypable = OrganizationType{}

type OrganizationType struct {
	basetypes.ObjectType
}

func (t OrganizationType) Equal(o attr.Type) bool {
	other, ok := o.(OrganizationType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t OrganizationType) String() string {
	return "OrganizationType"
}

func (t OrganizationType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	createdAtAttribute, ok := attributes["created_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`created_at is missing from object`)

		return nil, diags
	}

	createdAtVal, ok := createdAtAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`created_at expected to be basetypes.StringValue, was: %T`, createdAtAttribute))
	}

	descriptionAttribute, ok := attributes["description"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`description is missing from object`)

		return nil, diags
	}

	descriptionVal, ok := descriptionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`description expected to be basetypes.StringValue, was: %T`, descriptionAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return nil, diags
	}

	idVal, ok := idAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.StringValue, was: %T`, idAttribute))
	}

	isActiveAttribute, ok := attributes["is_active"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`is_active is missing from object`)

		return nil, diags
	}

	isActiveVal, ok := isActiveAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`is_active expected to be basetypes.BoolValue, was: %T`, isActiveAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return nil, diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	tagsAttribute, ok := attributes["tags"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`tags is missing from object`)

		return nil, diags
	}

	tagsVal, ok := tagsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`tags expected to be basetypes.ListValue, was: %T`, tagsAttribute))
	}

	updatedAtAttribute, ok := attributes["updated_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`updated_at is missing from object`)

		return nil, diags
	}

	updatedAtVal, ok := updatedAtAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`updated_at expected to be basetypes.StringValue, was: %T`, updatedAtAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return OrganizationValue{
		CreatedAt:   createdAtVal,
		Description: descriptionVal,
		Id:          idVal,
		IsActive:    isActiveVal,
		Name:        nameVal,
		Tags:        tagsVal,
		UpdatedAt:   updatedAtVal,
		state:       attr.ValueStateKnown,
	}, diags
}

func NewOrganizationValueNull() OrganizationValue {
	return OrganizationValue{
		state: attr.ValueStateNull,
	}
}

func NewOrganizationValueUnknown() OrganizationValue {
	return OrganizationValue{
		state: attr.ValueStateUnknown,
	}
}

func NewOrganizationValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (OrganizationValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing OrganizationValue Attribute Value",
				"While creating a OrganizationValue value, a missing attribute value was detected. "+
					"A OrganizationValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("OrganizationValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid OrganizationValue Attribute Type",
				"While creating a OrganizationValue value, an invalid attribute value was detected. "+
					"A OrganizationValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("OrganizationValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("OrganizationValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra OrganizationValue Attribute Value",
				"While creating a OrganizationValue value, an extra attribute value was detected. "+
					"A OrganizationValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra OrganizationValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewOrganizationValueUnknown(), diags
	}

	createdAtAttribute, ok := attributes["created_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`created_at is missing from object`)

		return NewOrganizationValueUnknown(), diags
	}

	createdAtVal, ok := createdAtAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`created_at expected to be basetypes.StringValue, was: %T`, createdAtAttribute))
	}

	descriptionAttribute, ok := attributes["description"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`description is missing from object`)

		return NewOrganizationValueUnknown(), diags
	}

	descriptionVal, ok := descriptionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`description expected to be basetypes.StringValue, was: %T`, descriptionAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return NewOrganizationValueUnknown(), diags
	}

	idVal, ok := idAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.StringValue, was: %T`, idAttribute))
	}

	isActiveAttribute, ok := attributes["is_active"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`is_active is missing from object`)

		return NewOrganizationValueUnknown(), diags
	}

	isActiveVal, ok := isActiveAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`is_active expected to be basetypes.BoolValue, was: %T`, isActiveAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return NewOrganizationValueUnknown(), diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	tagsAttribute, ok := attributes["tags"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`tags is missing from object`)

		return NewOrganizationValueUnknown(), diags
	}

	tagsVal, ok := tagsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`tags expected to be basetypes.ListValue, was: %T`, tagsAttribute))
	}

	updatedAtAttribute, ok := attributes["updated_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`updated_at is missing from object`)

		return NewOrganizationValueUnknown(), diags
	}

	updatedAtVal, ok := updatedAtAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`updated_at expected to be basetypes.StringValue, was: %T`, updatedAtAttribute))
	}

	if diags.HasError() {
		return NewOrganizationValueUnknown(), diags
	}

	return OrganizationValue{
		CreatedAt:   createdAtVal,
		Description: descriptionVal,
		Id:          idVal,
		IsActive:    isActiveVal,
		Name:        nameVal,
		Tags:        tagsVal,
		UpdatedAt:   updatedAtVal,
		state:       attr.ValueStateKnown,
	}, diags
}

func NewOrganizationValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) OrganizationValue {
	object, diags := NewOrganizationValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewOrganizationValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t OrganizationType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewOrganizationValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewOrganizationValueUnknown(), nil
	}

	if in.IsNull() {
		return NewOrganizationValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewOrganizationValueMust(OrganizationValue{}.AttributeTypes(ctx), attributes), nil
}

func (t OrganizationType) ValueType(ctx context.Context) attr.Value {
	return OrganizationValue{}
}

var _ basetypes.ObjectValuable = OrganizationValue{}

type OrganizationValue struct {
	CreatedAt   basetypes.StringValue `tfsdk:"created_at"`
	Description basetypes.StringValue `tfsdk:"description"`
	Id          basetypes.StringValue `tfsdk:"id"`
	IsActive    basetypes.BoolValue   `tfsdk:"is_active"`
	Name        basetypes.StringValue `tfsdk:"name"`
	Tags        basetypes.ListValue   `tfsdk:"tags"`
	UpdatedAt   basetypes.StringValue `tfsdk:"updated_at"`
	state       attr.ValueState
}

func (v OrganizationValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 7)

	var val tftypes.Value
	var err error

	attrTypes["created_at"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["description"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["is_active"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["tags"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["updated_at"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 7)

		val, err = v.CreatedAt.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["created_at"] = val

		val, err = v.Description.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["description"] = val

		val, err = v.Id.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["id"] = val

		val, err = v.IsActive.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["is_active"] = val

		val, err = v.Name.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name"] = val

		val, err = v.Tags.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["tags"] = val

		val, err = v.UpdatedAt.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["updated_at"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v OrganizationValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v OrganizationValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v OrganizationValue) String() string {
	return "OrganizationValue"
}

func (v OrganizationValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var tagsVal basetypes.ListValue
	switch {
	case v.Tags.IsUnknown():
		tagsVal = types.ListUnknown(types.StringType)
	case v.Tags.IsNull():
		tagsVal = types.ListNull(types.StringType)
	default:
		var d diag.Diagnostics
		tagsVal, d = types.ListValue(types.StringType, v.Tags.Elements())
		diags.Append(d...)
	}

	if diags.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"created_at":  basetypes.StringType{},
			"description": basetypes.StringType{},
			"id":          basetypes.StringType{},
			"is_active":   basetypes.BoolType{},
			"name":        basetypes.StringType{},
			"tags": basetypes.ListType{
				ElemType: types.StringType,
			},
			"updated_at": basetypes.StringType{},
		}), diags
	}

	attributeTypes := map[string]attr.Type{
		"created_at":  basetypes.StringType{},
		"description": basetypes.StringType{},
		"id":          basetypes.StringType{},
		"is_active":   basetypes.BoolType{},
		"name":        basetypes.StringType{},
		"tags": basetypes.ListType{
			ElemType: types.StringType,
		},
		"updated_at": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"created_at":  v.CreatedAt,
			"description": v.Description,
			"id":          v.Id,
			"is_active":   v.IsActive,
			"name":        v.Name,
			"tags":        tagsVal,
			"updated_at":  v.UpdatedAt,
		})

	return objVal, diags
}

func (v OrganizationValue) Equal(o attr.Value) bool {
	other, ok := o.(OrganizationValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.CreatedAt.Equal(other.CreatedAt) {
		return false
	}

	if !v.Description.Equal(other.Description) {
		return false
	}

	if !v.Id.Equal(other.Id) {
		return false
	}

	if !v.IsActive.Equal(other.IsActive) {
		return false
	}

	if !v.Name.Equal(other.Name) {
		return false
	}

	if !v.Tags.Equal(other.Tags) {
		return false
	}

	if !v.UpdatedAt.Equal(other.UpdatedAt) {
		return false
	}

	return true
}

func (v OrganizationValue) Type(ctx context.Context) attr.Type {
	return OrganizationType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v OrganizationValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"created_at":  basetypes.StringType{},
		"description": basetypes.StringType{},
		"id":          basetypes.StringType{},
		"is_active":   basetypes.BoolType{},
		"name":        basetypes.StringType{},
		"tags": basetypes.ListType{
			ElemType: types.StringType,
		},
		"updated_at": basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = ServiceAccountType{}

type ServiceAccountType struct {
	basetypes.ObjectType
}

func (t ServiceAccountType) Equal(o attr.Type) bool {
	other, ok := o.(ServiceAccountType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t ServiceAccountType) String() string {
	return "ServiceAccountType"
}

func (t ServiceAccountType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	createdAtAttribute, ok := attributes["created_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`created_at is missing from object`)

		return nil, diags
	}

	createdAtVal, ok := createdAtAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`created_at expected to be basetypes.StringValue, was: %T`, createdAtAttribute))
	}

	descriptionAttribute, ok := attributes["description"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`description is missing from object`)

		return nil, diags
	}

	descriptionVal, ok := descriptionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`description expected to be basetypes.StringValue, was: %T`, descriptionAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return nil, diags
	}

	idVal, ok := idAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.StringValue, was: %T`, idAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return nil, diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	updatedAtAttribute, ok := attributes["updated_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`updated_at is missing from object`)

		return nil, diags
	}

	updatedAtVal, ok := updatedAtAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`updated_at expected to be basetypes.StringValue, was: %T`, updatedAtAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return ServiceAccountValue{
		CreatedAt:   createdAtVal,
		Description: descriptionVal,
		Id:          idVal,
		Name:        nameVal,
		UpdatedAt:   updatedAtVal,
		state:       attr.ValueStateKnown,
	}, diags
}

func NewServiceAccountValueNull() ServiceAccountValue {
	return ServiceAccountValue{
		state: attr.ValueStateNull,
	}
}

func NewServiceAccountValueUnknown() ServiceAccountValue {
	return ServiceAccountValue{
		state: attr.ValueStateUnknown,
	}
}

func NewServiceAccountValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (ServiceAccountValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing ServiceAccountValue Attribute Value",
				"While creating a ServiceAccountValue value, a missing attribute value was detected. "+
					"A ServiceAccountValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ServiceAccountValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid ServiceAccountValue Attribute Type",
				"While creating a ServiceAccountValue value, an invalid attribute value was detected. "+
					"A ServiceAccountValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ServiceAccountValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("ServiceAccountValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra ServiceAccountValue Attribute Value",
				"While creating a ServiceAccountValue value, an extra attribute value was detected. "+
					"A ServiceAccountValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra ServiceAccountValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewServiceAccountValueUnknown(), diags
	}

	createdAtAttribute, ok := attributes["created_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`created_at is missing from object`)

		return NewServiceAccountValueUnknown(), diags
	}

	createdAtVal, ok := createdAtAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`created_at expected to be basetypes.StringValue, was: %T`, createdAtAttribute))
	}

	descriptionAttribute, ok := attributes["description"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`description is missing from object`)

		return NewServiceAccountValueUnknown(), diags
	}

	descriptionVal, ok := descriptionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`description expected to be basetypes.StringValue, was: %T`, descriptionAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return NewServiceAccountValueUnknown(), diags
	}

	idVal, ok := idAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.StringValue, was: %T`, idAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return NewServiceAccountValueUnknown(), diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	updatedAtAttribute, ok := attributes["updated_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`updated_at is missing from object`)

		return NewServiceAccountValueUnknown(), diags
	}

	updatedAtVal, ok := updatedAtAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`updated_at expected to be basetypes.StringValue, was: %T`, updatedAtAttribute))
	}

	if diags.HasError() {
		return NewServiceAccountValueUnknown(), diags
	}

	return ServiceAccountValue{
		CreatedAt:   createdAtVal,
		Description: descriptionVal,
		Id:          idVal,
		Name:        nameVal,
		UpdatedAt:   updatedAtVal,
		state:       attr.ValueStateKnown,
	}, diags
}

func NewServiceAccountValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) ServiceAccountValue {
	object, diags := NewServiceAccountValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewServiceAccountValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t ServiceAccountType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewServiceAccountValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewServiceAccountValueUnknown(), nil
	}

	if in.IsNull() {
		return NewServiceAccountValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewServiceAccountValueMust(ServiceAccountValue{}.AttributeTypes(ctx), attributes), nil
}

func (t ServiceAccountType) ValueType(ctx context.Context) attr.Value {
	return ServiceAccountValue{}
}

var _ basetypes.ObjectValuable = ServiceAccountValue{}

type ServiceAccountValue struct {
	CreatedAt   basetypes.StringValue `tfsdk:"created_at"`
	Description basetypes.StringValue `tfsdk:"description"`
	Id          basetypes.StringValue `tfsdk:"id"`
	Name        basetypes.StringValue `tfsdk:"name"`
	UpdatedAt   basetypes.StringValue `tfsdk:"updated_at"`
	state       attr.ValueState
}

func (v ServiceAccountValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 5)

	var val tftypes.Value
	var err error

	attrTypes["created_at"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["description"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["updated_at"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 5)

		val, err = v.CreatedAt.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["created_at"] = val

		val, err = v.Description.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["description"] = val

		val, err = v.Id.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["id"] = val

		val, err = v.Name.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name"] = val

		val, err = v.UpdatedAt.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["updated_at"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v ServiceAccountValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v ServiceAccountValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v ServiceAccountValue) String() string {
	return "ServiceAccountValue"
}

func (v ServiceAccountValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"created_at":  basetypes.StringType{},
		"description": basetypes.StringType{},
		"id":          basetypes.StringType{},
		"name":        basetypes.StringType{},
		"updated_at":  basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"created_at":  v.CreatedAt,
			"description": v.Description,
			"id":          v.Id,
			"name":        v.Name,
			"updated_at":  v.UpdatedAt,
		})

	return objVal, diags
}

func (v ServiceAccountValue) Equal(o attr.Value) bool {
	other, ok := o.(ServiceAccountValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.CreatedAt.Equal(other.CreatedAt) {
		return false
	}

	if !v.Description.Equal(other.Description) {
		return false
	}

	if !v.Id.Equal(other.Id) {
		return false
	}

	if !v.Name.Equal(other.Name) {
		return false
	}

	if !v.UpdatedAt.Equal(other.UpdatedAt) {
		return false
	}

	return true
}

func (v ServiceAccountValue) Type(ctx context.Context) attr.Type {
	return ServiceAccountType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v ServiceAccountValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"created_at":  basetypes.StringType{},
		"description": basetypes.StringType{},
		"id":          basetypes.StringType{},
		"name":        basetypes.StringType{},
		"updated_at":  basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = TeamType{}

type TeamType struct {
	basetypes.ObjectType
}

func (t TeamType) Equal(o attr.Type) bool {
	other, ok := o.(TeamType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t TeamType) String() string {
	return "TeamType"
}

func (t TeamType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	descriptionAttribute, ok := attributes["description"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`description is missing from object`)

		return nil, diags
	}

	descriptionVal, ok := descriptionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`description expected to be basetypes.StringValue, was: %T`, descriptionAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return nil, diags
	}

	idVal, ok := idAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.StringValue, was: %T`, idAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return nil, diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	tagsAttribute, ok := attributes["tags"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`tags is missing from object`)

		return nil, diags
	}

	tagsVal, ok := tagsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`tags expected to be basetypes.ListValue, was: %T`, tagsAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return TeamValue{
		Description: descriptionVal,
		Id:          idVal,
		Name:        nameVal,
		Tags:        tagsVal,
		state:       attr.ValueStateKnown,
	}, diags
}

func NewTeamValueNull() TeamValue {
	return TeamValue{
		state: attr.ValueStateNull,
	}
}

func NewTeamValueUnknown() TeamValue {
	return TeamValue{
		state: attr.ValueStateUnknown,
	}
}

func NewTeamValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (TeamValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing TeamValue Attribute Value",
				"While creating a TeamValue value, a missing attribute value was detected. "+
					"A TeamValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("TeamValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid TeamValue Attribute Type",
				"While creating a TeamValue value, an invalid attribute value was detected. "+
					"A TeamValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("TeamValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("TeamValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra TeamValue Attribute Value",
				"While creating a TeamValue value, an extra attribute value was detected. "+
					"A TeamValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra TeamValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewTeamValueUnknown(), diags
	}

	descriptionAttribute, ok := attributes["description"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`description is missing from object`)

		return NewTeamValueUnknown(), diags
	}

	descriptionVal, ok := descriptionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`description expected to be basetypes.StringValue, was: %T`, descriptionAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return NewTeamValueUnknown(), diags
	}

	idVal, ok := idAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.StringValue, was: %T`, idAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return NewTeamValueUnknown(), diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	tagsAttribute, ok := attributes["tags"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`tags is missing from object`)

		return NewTeamValueUnknown(), diags
	}

	tagsVal, ok := tagsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`tags expected to be basetypes.ListValue, was: %T`, tagsAttribute))
	}

	if diags.HasError() {
		return NewTeamValueUnknown(), diags
	}

	return TeamValue{
		Description: descriptionVal,
		Id:          idVal,
		Name:        nameVal,
		Tags:        tagsVal,
		state:       attr.ValueStateKnown,
	}, diags
}

func NewTeamValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) TeamValue {
	object, diags := NewTeamValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewTeamValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t TeamType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewTeamValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewTeamValueUnknown(), nil
	}

	if in.IsNull() {
		return NewTeamValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewTeamValueMust(TeamValue{}.AttributeTypes(ctx), attributes), nil
}

func (t TeamType) ValueType(ctx context.Context) attr.Value {
	return TeamValue{}
}

var _ basetypes.ObjectValuable = TeamValue{}

type TeamValue struct {
	Description basetypes.StringValue `tfsdk:"description"`
	Id          basetypes.StringValue `tfsdk:"id"`
	Name        basetypes.StringValue `tfsdk:"name"`
	Tags        basetypes.ListValue   `tfsdk:"tags"`
	state       attr.ValueState
}

func (v TeamValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 4)

	var val tftypes.Value
	var err error

	attrTypes["description"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["tags"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 4)

		val, err = v.Description.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["description"] = val

		val, err = v.Id.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["id"] = val

		val, err = v.Name.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name"] = val

		val, err = v.Tags.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["tags"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v TeamValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v TeamValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v TeamValue) String() string {
	return "TeamValue"
}

func (v TeamValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var tagsVal basetypes.ListValue
	switch {
	case v.Tags.IsUnknown():
		tagsVal = types.ListUnknown(types.StringType)
	case v.Tags.IsNull():
		tagsVal = types.ListNull(types.StringType)
	default:
		var d diag.Diagnostics
		tagsVal, d = types.ListValue(types.StringType, v.Tags.Elements())
		diags.Append(d...)
	}

	if diags.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"description": basetypes.StringType{},
			"id":          basetypes.StringType{},
			"name":        basetypes.StringType{},
			"tags": basetypes.ListType{
				ElemType: types.StringType,
			},
		}), diags
	}

	attributeTypes := map[string]attr.Type{
		"description": basetypes.StringType{},
		"id":          basetypes.StringType{},
		"name":        basetypes.StringType{},
		"tags": basetypes.ListType{
			ElemType: types.StringType,
		},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"description": v.Description,
			"id":          v.Id,
			"name":        v.Name,
			"tags":        tagsVal,
		})

	return objVal, diags
}

func (v TeamValue) Equal(o attr.Value) bool {
	other, ok := o.(TeamValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Description.Equal(other.Description) {
		return false
	}

	if !v.Id.Equal(other.Id) {
		return false
	}

	if !v.Name.Equal(other.Name) {
		return false
	}

	if !v.Tags.Equal(other.Tags) {
		return false
	}

	return true
}

func (v TeamValue) Type(ctx context.Context) attr.Type {
	return TeamType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v TeamValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"description": basetypes.StringType{},
		"id":          basetypes.StringType{},
		"name":        basetypes.StringType{},
		"tags": basetypes.ListType{
			ElemType: types.StringType,
		},
	}
}

var _ basetypes.ObjectTypable = UserTeamMembershipType{}

type UserTeamMembershipType struct {
	basetypes.ObjectType
}

func (t UserTeamMembershipType) Equal(o attr.Type) bool {
	other, ok := o.(UserTeamMembershipType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t UserTeamMembershipType) String() string {
	return "UserTeamMembershipType"
}

func (t UserTeamMembershipType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	membershipTypeAttribute, ok := attributes["membership_type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`membership_type is missing from object`)

		return nil, diags
	}

	membershipTypeVal, ok := membershipTypeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`membership_type expected to be basetypes.StringValue, was: %T`, membershipTypeAttribute))
	}

	orgPermissionsAttribute, ok := attributes["org_permissions"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`org_permissions is missing from object`)

		return nil, diags
	}

	orgPermissionsVal, ok := orgPermissionsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`org_permissions expected to be basetypes.ListValue, was: %T`, orgPermissionsAttribute))
	}

	organizationAttribute, ok := attributes["organization"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`organization is missing from object`)

		return nil, diags
	}

	organizationVal, ok := organizationAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`organization expected to be basetypes.ObjectValue, was: %T`, organizationAttribute))
	}

	projectsAttribute, ok := attributes["projects"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`projects is missing from object`)

		return nil, diags
	}

	projectsVal, ok := projectsAttribute.(basetypes.MapValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`projects expected to be basetypes.MapValue, was: %T`, projectsAttribute))
	}

	teamAttribute, ok := attributes["team"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`team is missing from object`)

		return nil, diags
	}

	teamVal, ok := teamAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`team expected to be basetypes.ObjectValue, was: %T`, teamAttribute))
	}

	teamPermissionsAttribute, ok := attributes["team_permissions"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`team_permissions is missing from object`)

		return nil, diags
	}

	teamPermissionsVal, ok := teamPermissionsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`team_permissions expected to be basetypes.ListValue, was: %T`, teamPermissionsAttribute))
	}

	userAttribute, ok := attributes["user"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`user is missing from object`)

		return nil, diags
	}

	userVal, ok := userAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`user expected to be basetypes.ObjectValue, was: %T`, userAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return UserTeamMembershipValue{
		MembershipType:  membershipTypeVal,
		OrgPermissions:  orgPermissionsVal,
		Organization:    organizationVal,
		Projects:        projectsVal,
		Team:            teamVal,
		TeamPermissions: teamPermissionsVal,
		User:            userVal,
		state:           attr.ValueStateKnown,
	}, diags
}

func NewUserTeamMembershipValueNull() UserTeamMembershipValue {
	return UserTeamMembershipValue{
		state: attr.ValueStateNull,
	}
}

func NewUserTeamMembershipValueUnknown() UserTeamMembershipValue {
	return UserTeamMembershipValue{
		state: attr.ValueStateUnknown,
	}
}

func NewUserTeamMembershipValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (UserTeamMembershipValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing UserTeamMembershipValue Attribute Value",
				"While creating a UserTeamMembershipValue value, a missing attribute value was detected. "+
					"A UserTeamMembershipValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("UserTeamMembershipValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid UserTeamMembershipValue Attribute Type",
				"While creating a UserTeamMembershipValue value, an invalid attribute value was detected. "+
					"A UserTeamMembershipValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("UserTeamMembershipValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("UserTeamMembershipValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra UserTeamMembershipValue Attribute Value",
				"While creating a UserTeamMembershipValue value, an extra attribute value was detected. "+
					"A UserTeamMembershipValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra UserTeamMembershipValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewUserTeamMembershipValueUnknown(), diags
	}

	membershipTypeAttribute, ok := attributes["membership_type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`membership_type is missing from object`)

		return NewUserTeamMembershipValueUnknown(), diags
	}

	membershipTypeVal, ok := membershipTypeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`membership_type expected to be basetypes.StringValue, was: %T`, membershipTypeAttribute))
	}

	orgPermissionsAttribute, ok := attributes["org_permissions"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`org_permissions is missing from object`)

		return NewUserTeamMembershipValueUnknown(), diags
	}

	orgPermissionsVal, ok := orgPermissionsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`org_permissions expected to be basetypes.ListValue, was: %T`, orgPermissionsAttribute))
	}

	organizationAttribute, ok := attributes["organization"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`organization is missing from object`)

		return NewUserTeamMembershipValueUnknown(), diags
	}

	organizationVal, ok := organizationAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`organization expected to be basetypes.ObjectValue, was: %T`, organizationAttribute))
	}

	projectsAttribute, ok := attributes["projects"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`projects is missing from object`)

		return NewUserTeamMembershipValueUnknown(), diags
	}

	projectsVal, ok := projectsAttribute.(basetypes.MapValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`projects expected to be basetypes.MapValue, was: %T`, projectsAttribute))
	}

	teamAttribute, ok := attributes["team"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`team is missing from object`)

		return NewUserTeamMembershipValueUnknown(), diags
	}

	teamVal, ok := teamAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`team expected to be basetypes.ObjectValue, was: %T`, teamAttribute))
	}

	teamPermissionsAttribute, ok := attributes["team_permissions"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`team_permissions is missing from object`)

		return NewUserTeamMembershipValueUnknown(), diags
	}

	teamPermissionsVal, ok := teamPermissionsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`team_permissions expected to be basetypes.ListValue, was: %T`, teamPermissionsAttribute))
	}

	userAttribute, ok := attributes["user"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`user is missing from object`)

		return NewUserTeamMembershipValueUnknown(), diags
	}

	userVal, ok := userAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`user expected to be basetypes.ObjectValue, was: %T`, userAttribute))
	}

	if diags.HasError() {
		return NewUserTeamMembershipValueUnknown(), diags
	}

	return UserTeamMembershipValue{
		MembershipType:  membershipTypeVal,
		OrgPermissions:  orgPermissionsVal,
		Organization:    organizationVal,
		Projects:        projectsVal,
		Team:            teamVal,
		TeamPermissions: teamPermissionsVal,
		User:            userVal,
		state:           attr.ValueStateKnown,
	}, diags
}

func NewUserTeamMembershipValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) UserTeamMembershipValue {
	object, diags := NewUserTeamMembershipValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewUserTeamMembershipValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t UserTeamMembershipType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewUserTeamMembershipValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewUserTeamMembershipValueUnknown(), nil
	}

	if in.IsNull() {
		return NewUserTeamMembershipValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewUserTeamMembershipValueMust(UserTeamMembershipValue{}.AttributeTypes(ctx), attributes), nil
}

func (t UserTeamMembershipType) ValueType(ctx context.Context) attr.Value {
	return UserTeamMembershipValue{}
}

var _ basetypes.ObjectValuable = UserTeamMembershipValue{}

type UserTeamMembershipValue struct {
	MembershipType  basetypes.StringValue `tfsdk:"membership_type"`
	OrgPermissions  basetypes.ListValue   `tfsdk:"org_permissions"`
	Organization    basetypes.ObjectValue `tfsdk:"organization"`
	Projects        basetypes.MapValue    `tfsdk:"projects"`
	Team            basetypes.ObjectValue `tfsdk:"team"`
	TeamPermissions basetypes.ListValue   `tfsdk:"team_permissions"`
	User            basetypes.ObjectValue `tfsdk:"user"`
	state           attr.ValueState
}

func (v UserTeamMembershipValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 7)

	var val tftypes.Value
	var err error

	attrTypes["membership_type"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["org_permissions"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["organization"] = basetypes.ObjectType{
		AttrTypes: OrganizationValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)
	attrTypes["projects"] = basetypes.MapType{
		ElemType: types.ListType{
			ElemType: types.StringType,
		},
	}.TerraformType(ctx)
	attrTypes["team"] = basetypes.ObjectType{
		AttrTypes: TeamValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)
	attrTypes["team_permissions"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["user"] = basetypes.ObjectType{
		AttrTypes: UserValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 7)

		val, err = v.MembershipType.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["membership_type"] = val

		val, err = v.OrgPermissions.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["org_permissions"] = val

		val, err = v.Organization.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["organization"] = val

		val, err = v.Projects.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["projects"] = val

		val, err = v.Team.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["team"] = val

		val, err = v.TeamPermissions.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["team_permissions"] = val

		val, err = v.User.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["user"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v UserTeamMembershipValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v UserTeamMembershipValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v UserTeamMembershipValue) String() string {
	return "UserTeamMembershipValue"
}

func (v UserTeamMembershipValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var organization basetypes.ObjectValue

	if v.Organization.IsNull() {
		organization = types.ObjectNull(
			OrganizationValue{}.AttributeTypes(ctx),
		)
	}

	if v.Organization.IsUnknown() {
		organization = types.ObjectUnknown(
			OrganizationValue{}.AttributeTypes(ctx),
		)
	}

	if !v.Organization.IsNull() && !v.Organization.IsUnknown() {
		organization = types.ObjectValueMust(
			OrganizationValue{}.AttributeTypes(ctx),
			v.Organization.Attributes(),
		)
	}

	var team basetypes.ObjectValue

	if v.Team.IsNull() {
		team = types.ObjectNull(
			TeamValue{}.AttributeTypes(ctx),
		)
	}

	if v.Team.IsUnknown() {
		team = types.ObjectUnknown(
			TeamValue{}.AttributeTypes(ctx),
		)
	}

	if !v.Team.IsNull() && !v.Team.IsUnknown() {
		team = types.ObjectValueMust(
			TeamValue{}.AttributeTypes(ctx),
			v.Team.Attributes(),
		)
	}

	var user basetypes.ObjectValue

	if v.User.IsNull() {
		user = types.ObjectNull(
			UserValue{}.AttributeTypes(ctx),
		)
	}

	if v.User.IsUnknown() {
		user = types.ObjectUnknown(
			UserValue{}.AttributeTypes(ctx),
		)
	}

	if !v.User.IsNull() && !v.User.IsUnknown() {
		user = types.ObjectValueMust(
			UserValue{}.AttributeTypes(ctx),
			v.User.Attributes(),
		)
	}

	var orgPermissionsVal basetypes.ListValue
	switch {
	case v.OrgPermissions.IsUnknown():
		orgPermissionsVal = types.ListUnknown(types.StringType)
	case v.OrgPermissions.IsNull():
		orgPermissionsVal = types.ListNull(types.StringType)
	default:
		var d diag.Diagnostics
		orgPermissionsVal, d = types.ListValue(types.StringType, v.OrgPermissions.Elements())
		diags.Append(d...)
	}

	if diags.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"membership_type": basetypes.StringType{},
			"org_permissions": basetypes.ListType{
				ElemType: types.StringType,
			},
			"organization": basetypes.ObjectType{
				AttrTypes: OrganizationValue{}.AttributeTypes(ctx),
			},
			"projects": basetypes.MapType{
				ElemType: types.ListType{
					ElemType: types.StringType,
				},
			},
			"team": basetypes.ObjectType{
				AttrTypes: TeamValue{}.AttributeTypes(ctx),
			},
			"team_permissions": basetypes.ListType{
				ElemType: types.StringType,
			},
			"user": basetypes.ObjectType{
				AttrTypes: UserValue{}.AttributeTypes(ctx),
			},
		}), diags
	}

	var projectsVal basetypes.MapValue
	switch {
	case v.Projects.IsUnknown():
		projectsVal = types.MapUnknown(types.ListType{
			ElemType: types.StringType,
		})
	case v.Projects.IsNull():
		projectsVal = types.MapNull(types.ListType{
			ElemType: types.StringType,
		})
	default:
		var d diag.Diagnostics
		projectsVal, d = types.MapValue(types.ListType{
			ElemType: types.StringType,
		}, v.Projects.Elements())
		diags.Append(d...)
	}

	if diags.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"membership_type": basetypes.StringType{},
			"org_permissions": basetypes.ListType{
				ElemType: types.StringType,
			},
			"organization": basetypes.ObjectType{
				AttrTypes: OrganizationValue{}.AttributeTypes(ctx),
			},
			"projects": basetypes.MapType{
				ElemType: types.ListType{
					ElemType: types.StringType,
				},
			},
			"team": basetypes.ObjectType{
				AttrTypes: TeamValue{}.AttributeTypes(ctx),
			},
			"team_permissions": basetypes.ListType{
				ElemType: types.StringType,
			},
			"user": basetypes.ObjectType{
				AttrTypes: UserValue{}.AttributeTypes(ctx),
			},
		}), diags
	}

	var teamPermissionsVal basetypes.ListValue
	switch {
	case v.TeamPermissions.IsUnknown():
		teamPermissionsVal = types.ListUnknown(types.StringType)
	case v.TeamPermissions.IsNull():
		teamPermissionsVal = types.ListNull(types.StringType)
	default:
		var d diag.Diagnostics
		teamPermissionsVal, d = types.ListValue(types.StringType, v.TeamPermissions.Elements())
		diags.Append(d...)
	}

	if diags.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"membership_type": basetypes.StringType{},
			"org_permissions": basetypes.ListType{
				ElemType: types.StringType,
			},
			"organization": basetypes.ObjectType{
				AttrTypes: OrganizationValue{}.AttributeTypes(ctx),
			},
			"projects": basetypes.MapType{
				ElemType: types.ListType{
					ElemType: types.StringType,
				},
			},
			"team": basetypes.ObjectType{
				AttrTypes: TeamValue{}.AttributeTypes(ctx),
			},
			"team_permissions": basetypes.ListType{
				ElemType: types.StringType,
			},
			"user": basetypes.ObjectType{
				AttrTypes: UserValue{}.AttributeTypes(ctx),
			},
		}), diags
	}

	attributeTypes := map[string]attr.Type{
		"membership_type": basetypes.StringType{},
		"org_permissions": basetypes.ListType{
			ElemType: types.StringType,
		},
		"organization": basetypes.ObjectType{
			AttrTypes: OrganizationValue{}.AttributeTypes(ctx),
		},
		"projects": basetypes.MapType{
			ElemType: types.ListType{
				ElemType: types.StringType,
			},
		},
		"team": basetypes.ObjectType{
			AttrTypes: TeamValue{}.AttributeTypes(ctx),
		},
		"team_permissions": basetypes.ListType{
			ElemType: types.StringType,
		},
		"user": basetypes.ObjectType{
			AttrTypes: UserValue{}.AttributeTypes(ctx),
		},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"membership_type":  v.MembershipType,
			"org_permissions":  orgPermissionsVal,
			"organization":     organization,
			"projects":         projectsVal,
			"team":             team,
			"team_permissions": teamPermissionsVal,
			"user":             user,
		})

	return objVal, diags
}

func (v UserTeamMembershipValue) Equal(o attr.Value) bool {
	other, ok := o.(UserTeamMembershipValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.MembershipType.Equal(other.MembershipType) {
		return false
	}

	if !v.OrgPermissions.Equal(other.OrgPermissions) {
		return false
	}

	if !v.Organization.Equal(other.Organization) {
		return false
	}

	if !v.Projects.Equal(other.Projects) {
		return false
	}

	if !v.Team.Equal(other.Team) {
		return false
	}

	if !v.TeamPermissions.Equal(other.TeamPermissions) {
		return false
	}

	if !v.User.Equal(other.User) {
		return false
	}

	return true
}

func (v UserTeamMembershipValue) Type(ctx context.Context) attr.Type {
	return UserTeamMembershipType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v UserTeamMembershipValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"membership_type": basetypes.StringType{},
		"org_permissions": basetypes.ListType{
			ElemType: types.StringType,
		},
		"organization": basetypes.ObjectType{
			AttrTypes: OrganizationValue{}.AttributeTypes(ctx),
		},
		"projects": basetypes.MapType{
			ElemType: types.ListType{
				ElemType: types.StringType,
			},
		},
		"team": basetypes.ObjectType{
			AttrTypes: TeamValue{}.AttributeTypes(ctx),
		},
		"team_permissions": basetypes.ListType{
			ElemType: types.StringType,
		},
		"user": basetypes.ObjectType{
			AttrTypes: UserValue{}.AttributeTypes(ctx),
		},
	}
}

var _ basetypes.ObjectTypable = OrganizationType{}

var _ basetypes.ObjectValuable = OrganizationValue{}

var _ basetypes.ObjectTypable = TeamType{}

var _ basetypes.ObjectValuable = TeamValue{}

var _ basetypes.ObjectTypable = UserType{}

type UserType struct {
	basetypes.ObjectType
}

func (t UserType) Equal(o attr.Type) bool {
	other, ok := o.(UserType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t UserType) String() string {
	return "UserType"
}

func (t UserType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	emailAttribute, ok := attributes["email"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`email is missing from object`)

		return nil, diags
	}

	emailVal, ok := emailAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`email expected to be basetypes.StringValue, was: %T`, emailAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return nil, diags
	}

	idVal, ok := idAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.StringValue, was: %T`, idAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return UserValue{
		Email: emailVal,
		Id:    idVal,
		state: attr.ValueStateKnown,
	}, diags
}

func NewUserValueNull() UserValue {
	return UserValue{
		state: attr.ValueStateNull,
	}
}

func NewUserValueUnknown() UserValue {
	return UserValue{
		state: attr.ValueStateUnknown,
	}
}

func NewUserValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (UserValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing UserValue Attribute Value",
				"While creating a UserValue value, a missing attribute value was detected. "+
					"A UserValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("UserValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid UserValue Attribute Type",
				"While creating a UserValue value, an invalid attribute value was detected. "+
					"A UserValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("UserValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("UserValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra UserValue Attribute Value",
				"While creating a UserValue value, an extra attribute value was detected. "+
					"A UserValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra UserValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewUserValueUnknown(), diags
	}

	emailAttribute, ok := attributes["email"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`email is missing from object`)

		return NewUserValueUnknown(), diags
	}

	emailVal, ok := emailAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`email expected to be basetypes.StringValue, was: %T`, emailAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return NewUserValueUnknown(), diags
	}

	idVal, ok := idAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.StringValue, was: %T`, idAttribute))
	}

	if diags.HasError() {
		return NewUserValueUnknown(), diags
	}

	return UserValue{
		Email: emailVal,
		Id:    idVal,
		state: attr.ValueStateKnown,
	}, diags
}

func NewUserValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) UserValue {
	object, diags := NewUserValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewUserValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t UserType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewUserValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewUserValueUnknown(), nil
	}

	if in.IsNull() {
		return NewUserValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewUserValueMust(UserValue{}.AttributeTypes(ctx), attributes), nil
}

func (t UserType) ValueType(ctx context.Context) attr.Value {
	return UserValue{}
}

var _ basetypes.ObjectValuable = UserValue{}

type UserValue struct {
	Email basetypes.StringValue `tfsdk:"email"`
	Id    basetypes.StringValue `tfsdk:"id"`
	state attr.ValueState
}

func (v UserValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["email"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["id"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.Email.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["email"] = val

		val, err = v.Id.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["id"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v UserValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v UserValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v UserValue) String() string {
	return "UserValue"
}

func (v UserValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"email": basetypes.StringType{},
		"id":    basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"email": v.Email,
			"id":    v.Id,
		})

	return objVal, diags
}

func (v UserValue) Equal(o attr.Value) bool {
	other, ok := o.(UserValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Email.Equal(other.Email) {
		return false
	}

	if !v.Id.Equal(other.Id) {
		return false
	}

	return true
}

func (v UserValue) Type(ctx context.Context) attr.Type {
	return UserType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v UserValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"email": basetypes.StringType{},
		"id":    basetypes.StringType{},
	}
}
